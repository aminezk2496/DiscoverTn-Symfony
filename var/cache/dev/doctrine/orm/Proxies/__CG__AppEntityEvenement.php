<?php

namespace Proxies\__CG__\App\Entity;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Evenement extends \App\Entity\Evenement implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Evenement' . "\0" . 'idEvent', '' . "\0" . 'App\\Entity\\Evenement' . "\0" . 'titreEvent', '' . "\0" . 'App\\Entity\\Evenement' . "\0" . 'dateDebutEvent', '' . "\0" . 'App\\Entity\\Evenement' . "\0" . 'dateFinEvent', '' . "\0" . 'App\\Entity\\Evenement' . "\0" . 'prixEvent', '' . "\0" . 'App\\Entity\\Evenement' . "\0" . 'lieuEvent', '' . "\0" . 'App\\Entity\\Evenement' . "\0" . 'descEvent', '' . "\0" . 'App\\Entity\\Evenement' . "\0" . 'imageEvent', '' . "\0" . 'App\\Entity\\Evenement' . "\0" . 'idEvenementType'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Evenement' . "\0" . 'idEvent', '' . "\0" . 'App\\Entity\\Evenement' . "\0" . 'titreEvent', '' . "\0" . 'App\\Entity\\Evenement' . "\0" . 'dateDebutEvent', '' . "\0" . 'App\\Entity\\Evenement' . "\0" . 'dateFinEvent', '' . "\0" . 'App\\Entity\\Evenement' . "\0" . 'prixEvent', '' . "\0" . 'App\\Entity\\Evenement' . "\0" . 'lieuEvent', '' . "\0" . 'App\\Entity\\Evenement' . "\0" . 'descEvent', '' . "\0" . 'App\\Entity\\Evenement' . "\0" . 'imageEvent', '' . "\0" . 'App\\Entity\\Evenement' . "\0" . 'idEvenementType'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Evenement $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getIdEvent(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getIdEvent();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdEvent', []);

        return parent::getIdEvent();
    }

    /**
     * {@inheritDoc}
     */
    public function getTitreEvent(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitreEvent', []);

        return parent::getTitreEvent();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitreEvent(string $titreEvent): \App\Entity\Evenement
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitreEvent', [$titreEvent]);

        return parent::setTitreEvent($titreEvent);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateDebutEvent(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateDebutEvent', []);

        return parent::getDateDebutEvent();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateDebutEvent(\DateTimeInterface $dateDebutEvent): \App\Entity\Evenement
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateDebutEvent', [$dateDebutEvent]);

        return parent::setDateDebutEvent($dateDebutEvent);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateFinEvent(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateFinEvent', []);

        return parent::getDateFinEvent();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateFinEvent(\DateTimeInterface $dateFinEvent): \App\Entity\Evenement
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateFinEvent', [$dateFinEvent]);

        return parent::setDateFinEvent($dateFinEvent);
    }

    /**
     * {@inheritDoc}
     */
    public function getPrixEvent(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPrixEvent', []);

        return parent::getPrixEvent();
    }

    /**
     * {@inheritDoc}
     */
    public function setPrixEvent(string $prixEvent): \App\Entity\Evenement
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPrixEvent', [$prixEvent]);

        return parent::setPrixEvent($prixEvent);
    }

    /**
     * {@inheritDoc}
     */
    public function getLieuEvent(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLieuEvent', []);

        return parent::getLieuEvent();
    }

    /**
     * {@inheritDoc}
     */
    public function setLieuEvent(string $lieuEvent): \App\Entity\Evenement
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLieuEvent', [$lieuEvent]);

        return parent::setLieuEvent($lieuEvent);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescEvent(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescEvent', []);

        return parent::getDescEvent();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescEvent(string $descEvent): \App\Entity\Evenement
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescEvent', [$descEvent]);

        return parent::setDescEvent($descEvent);
    }

    /**
     * {@inheritDoc}
     */
    public function getImageEvent(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImageEvent', []);

        return parent::getImageEvent();
    }

    /**
     * {@inheritDoc}
     */
    public function setImageEvent(string $imageEvent): \App\Entity\Evenement
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImageEvent', [$imageEvent]);

        return parent::setImageEvent($imageEvent);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdEvenementType(): ?\App\Entity\EvenementType
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdEvenementType', []);

        return parent::getIdEvenementType();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdEvenementType(?\App\Entity\EvenementType $idEvenementType): \App\Entity\Evenement
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdEvenementType', [$idEvenementType]);

        return parent::setIdEvenementType($idEvenementType);
    }

}
